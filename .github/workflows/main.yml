name: Build/release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: lts/jod

      - name: Enable Corepack
        run: corepack enable

      - name: Install Package Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

      # This finds the built files (like .exe, .dmg) and saves them
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }} # Creates artifacts like 'build-windows-latest'
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    
    # This 'if' check is still a good idea for safety
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'

    steps:
      # Step 1: Download all the artifacts from the 'build' job
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist # Downloads all artifacts into a 'dist' directory

      # Step 2: Create the GitHub Release
      - name: Create GitHub Release
        id: create_release # We need to give this step an ID
        uses: actions/create-release@v1
        with:
          # When you run manually on 'staging', this becomes 'staging'
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          # Mark as pre-release if on staging
          prerelease: ${{ github.ref_name == 'staging' || github.event_name == 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Upload the Windows asset
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-windows-latest/RyeLite-Setup-${{github.ref_name}}.exe # <-- IMPORTANT: Update this path!
          asset_name: RyeLite-Setup.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Upload the macOS asset
      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-macos-latest/RyeLite-${{github.ref_name}}-universal.dmg # <-- IMPORTANT: Update this path!
          asset_name: RyeLite.dmg
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Upload the Linux asset
      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/build-ubuntu-latest/RyeLite-${{github.ref_name}}.AppImage # <-- IMPORTANT: Update this path!
          asset_name: RyeLite.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
  #   steps:
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: dist
  #     - name: Create Release
  #       uses: actions/create-release@v1
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         release_name: Release ${{ github.ref_name }}
  #         draft: false
  #         prerelease: ${{ github.ref_name == 'staging' }}
  #         files: |
  #           dist/build-windows-latest/*
  #           dist/build-macos-latest/*
  #           dist/build-ubuntu-latest/*
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}