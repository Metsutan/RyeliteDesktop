name: Build/release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: lts/jod

      - name: Enable Corepack
        run: corepack enable

      - name: Install Package Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

      # This finds the built files (like .exe, .dmg) and saves them
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }} # Creates artifacts like 'build-windows-latest'
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ github.ref_name == 'staging' && (contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta')) }}
          files: |
            dist/build-windows-latest/*
            dist/build-macos-latest/*
            dist/build-ubuntu-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}